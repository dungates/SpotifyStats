#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,1,.2), cglwd=0.8,
#custom labels
vlcex=0.8 )
spotifyViz <- function(User, Playlist) {
# First we get all user playlists
playlists <- get_user_playlists(User)
# Filter for playlist selected
filtered <- dplyr::filter(playlists, name == Playlist)
# Get all features of that playlist with name and uri as documentation requires
features <- get_playlist_audio_features(filtered[1,6], substr(filtered[1, 11], 18, nchar(playlists[1,11])))
# Some quick cleaning
features_clean <- features %>% filter(!is.na(track.name) & !is.na(track.album.name))
features_clean$year <- as.numeric(substring(features_clean$track.album.release_date,1,4))
features_clean <- features_clean %>% dplyr::select(-track.id,-track.album.id,-playlist_id)
# Reorder columns so numerical data first, sorted by year descending
features_clean <- features_clean %>% relocate(year, danceability, energy, key, loudness, mode, speechiness, acousticness,
instrumentalness, liveness, valence, tempo, track.duration_ms,
track.popularity, track.artists,
track.name, track.album.name) %>% arrange(desc(year))
# Making a quick correlogram, energy and loudness only significant correlation. Acousticness negatively correlated w/
# loudness and energy. Track duration slightly negative with valence = -0.4 which is interesting
corrplot <- features_clean %>% dplyr::select(year, danceability, energy, key, loudness, mode, speechiness, acousticness,
instrumentalness, liveness, valence, tempo, track.duration_ms) %>% ggcorr(method = "pairwise",
label = T)
ggsave("/Users/dunk/Projects/SpotifyStats/Plots/Correlogram.png", corrplot)
# Making a density plot
correlated_density <- features_clean %>% select(energy, danceability, valence, acousticness, speechiness, liveness) %>%
ggplot() +
geom_density(aes(energy, fill ="energy", alpha = 0.1)) +
geom_density(aes(danceability, fill ="danceability", alpha = 0.1)) +
geom_density(aes(valence, fill ="valence", alpha = 0.1)) +
geom_density(aes(acousticness, fill ="acousticness", alpha = 0.1)) +
geom_density(aes(speechiness, fill ="speechiness", alpha = 0.1)) +
geom_density(aes(liveness, fill ="liveness", alpha = 0.1)) +
scale_x_continuous(name = "Energy, Danceability, Valence, Acousticness, Speechiness, and Liveness") +
scale_y_continuous(name = "Density") +
ggtitle("Density plot of Energy, Danceability, Valence, Acousticness, Speechiness, and Liveness") +
theme_bw() +
theme(plot.title = element_text(size = 10, face = "bold"),
text = element_text(size = 10)) +
theme(legend.title=element_blank()) +
scale_fill_brewer(palette="Accent")
ggsave("/Users/dunk/Projects/SpotifyStats/Plots/DensityPlot.png", correlated_density)
# Making a radar chart
radarChartData <- features_clean %>% select(valence, danceability, energy, speechiness, liveness) %>%
summarise_all(list(mean), na.rm = T)
radarChartData <- rbind(rep(1, 5), rep(0, 5), radarChartData)
fmsb::radarchart(radarChartData, axistype=1,
#custom polygon
pcol=rgb(0.2,0.5,0.5,0.9), pfcol=rgb(0.2,0.5,0.5,0.5), plwd=4,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,1,.2), cglwd=0.8,
#custom labels
vlcex=0.8 )
# Test code for now
# p <- ggplot(features_clean, aes(year, track.popularity)) + geom_point()
# ggplotly(p)
}
# Run program
spotifyViz("dungates", "Good")
ThesisData <- readr::read_csv("/Users/dunk/Thesis/Data/PanelData.csv", col_types = cols(`Under 10,000` = col_double(),
`100,000-1 Million` = col_double(),
`Over 1 Million` = col_double()))
ThesisData$wealthTax <- factor(ThesisData$wealthTax, levels = c(0,1))
ThesisData$Region <- as.factor(ThesisData$Region)
#Extra dataframe
pdata <- pdata.frame(ThesisData, index = c("Year","Country"))
fixed <- plm(wealthGini ~ incomeGini, data = ThesisData, index = c("Country","Year"), model = "within")
### REGRESSIONS
options("na.action" = "na.exclude") #idk why but this keeps needing to be coded
fixed <- plm(wealthGini ~ incomeGini, data = ThesisData, index = c("Country","Year"), model = "within")
summary(fixed)
#fixed effects constants for each country
fixef(fixed)
#testing for fixed effects, null: ols better than fixed, so reject null hypothesis here?
pFtest(fixed, ols)
## Fixed Effects Models
# Here's an actually good one
ols <- lm(wealthGini ~ incomeGini, data = ThesisData)
#testing for fixed effects, null: ols better than fixed, so reject null hypothesis here?
pFtest(fixed, ols)
View(ThesisData)
sum(is.na(ThesisData$incomeGini))
stargazer(fixed, type = "text")
summary(ols)
fixed <- plm(wealthGini ~ incomeGini, data = ThesisData, index = c("Country","Year"), model = "within")
summary(fixed)
#fixed effects constants for each country
fixef(fixed)
#testing for fixed effects, null: ols better than fixed, so reject null hypothesis here?
pFtest(fixed, ols)
fixed$model
fixed <- plm(wealthGini ~ incomeGini, data = ThesisData, index = c("Country"), model = "within")
summary(fixed)
fixed <- plm(wealthGini ~ incomeGini, data = ThesisData, index = c("Country","Year"), model = "within")
summary(fixed)
fixed <- plm(wealthGini ~ incomeGini + factor(Year), data = ThesisData, index = c("Country","Year"), model = "within") # Just country fixed
summary(fixed)
summary(ols)
fixed <- plm(wealthGini ~ incomeGini + factor(Year), data = ThesisData, index = c("Country","Year"), model = "within") # with fixed
summary(fixed)
mean(ThesisData$wealthGini, na.rm = T)
mean(ThesisData$incomeGini, na.rm = T)
fixed <- plm(wealthGini ~ incomeGini + factor(Year), data = ThesisData, index = c("Country","Year"), model = "twoways") # with fixed
fixed <- plm(wealthGini ~ incomeGini + factor(Year) + factor(Country), data = ThesisData, index = c("Country","Year"), model = "within") # with fixed
summary(fixed)
fixed <- plm(wealthGini ~ incomeGini + factor(Year) + as.factor(Country), data = ThesisData, index = c("Country","Year"), model = "within") # with fixed
summary(fixed)
Happiness2019 <- read_csv("/Users/dunk/Classes/NMC245/Happiness2019.csv")
Happiness2019 <- read_csv("/Users/dunk/Classes/NMC 245/Happiness2019.csv")
Happiness2019 <- read_csv("/Users/dunk/Classes/NMC 245/2019.csv")
View(Happiness2019)
BeerConsumption <- read_csv("/Users/dunk/Classes/NMC 245/beer-consumption-per-person.csv")
WineConsumption <- read_csv("/Users/dunk/Classes/NMC 245/wine-consumption-per-person.csv")
SpiritsConsumption <- read_csv("/Users/dunk/Classes/NMC 245/spirits-consumption-per-person.csv")
View(SpiritsConsumption)
?rename
colnames(SpiritsConsumption)
SpiritsConsumption <- SpiritsConsumption %>%
reshape::rename(c(`Indicator:Alcohol, recorded per capita (15+) consumption (in litres of pure alcohol) - Beverage Types:Spirits` =
"Spirits"))
unique(SpiritsConsumption$Year)
unique(BeerConsumption$Year)
unique(WineConsumption$Year)
View(BeerConsumption)
View(WineConsumption)
SpiritsConsumption <- SpiritsConsumption %>%
reshape::rename(c(`Indicator:Alcohol, recorded per capita (15+) consumption (in litres of pure alcohol) - Beverage Types:Spirits` =
"Spirits")) %>% filter(Year == 2015) %>% select(-Code)
# Filtering beer consumption for 2015 and renaming
BeerConsumption <- BeerConsumption %>%
reshape::rename(c(`Indicator:Alcohol, recorded per capita (15+) consumption (in litres of pure alcohol) - Beverage Types:Beer` =
"Beer")) %>% filter(Year == 2015) %>% select(-Code)
# Filtering wine consumption for 2015 and renaming
WineConsumption <- WineConsumption %>%
reshape::rename(c(`Indicator:Alcohol, recorded per capita (15+) consumption (in litres of pure alcohol) - Beverage Types:Wine` =
"Beer")) %>% filter(Year == 2015) %>% select(-Code)
View(BeerConsumption)
View(WineConsumption)
# Filtering spirit consumption for 2015 and renaming some things
SpiritsConsumption <- SpiritsConsumption %>%
reshape::rename(c(`Indicator:Alcohol, recorded per capita (15+) consumption (in litres of pure alcohol) - Beverage Types:Spirits` =
"Spirits")) %>% filter(Year == 2014) %>% select(-Code)
SpiritsConsumption <- read_csv("/Users/dunk/Classes/NMC 245/spirits-consumption-per-person.csv")
# Filtering spirit consumption for 2015 and renaming some things
SpiritsConsumption <- SpiritsConsumption %>%
reshape::rename(c(`Indicator:Alcohol, recorded per capita (15+) consumption (in litres of pure alcohol) - Beverage Types:Spirits` =
"Spirits")) %>% filter(Year == 2014) %>% select(-Code)
Happiness2019 <- read_csv("/Users/dunk/Classes/NMC 245/2019.csv")
BeerConsumption <- read_csv("/Users/dunk/Classes/NMC 245/beer-consumption-per-person.csv")
WineConsumption <- read_csv("/Users/dunk/Classes/NMC 245/wine-consumption-per-person.csv")
SpiritsConsumption <- read_csv("/Users/dunk/Classes/NMC 245/spirits-consumption-per-person.csv")
# Filtering spirit consumption for 2014 and renaming some things
SpiritsConsumption <- SpiritsConsumption %>%
reshape::rename(c(`Indicator:Alcohol, recorded per capita (15+) consumption (in litres of pure alcohol) - Beverage Types:Spirits` =
"Spirits")) %>% filter(Year == 2014) %>% select(-Code)
# Filtering beer consumption for 2015 and renaming
BeerConsumption <- BeerConsumption %>%
reshape::rename(c(`Indicator:Alcohol, recorded per capita (15+) consumption (in litres of pure alcohol) - Beverage Types:Beer` =
"Beer")) %>% filter(Year == 2014) %>% select(-Code)
# Filtering wine consumption for 2015 and renaming
WineConsumption <- WineConsumption %>%
reshape::rename(c(`Indicator:Alcohol, recorded per capita (15+) consumption (in litres of pure alcohol) - Beverage Types:Wine` =
"Beer")) %>% filter(Year == 2014) %>% select(-Code)
# Filtering spirit consumption for 2014 and renaming some things
SpiritsConsumption <- SpiritsConsumption %>%
reshape::rename(c(`Indicator:Alcohol, recorded per capita (15+) consumption (in litres of pure alcohol) - Beverage Types:Spirits` =
"Spirits")) %>% filter(Year == 2013) %>% select(-Code)
# Filtering beer consumption for 2015 and renaming
BeerConsumption <- BeerConsumption %>%
reshape::rename(c(`Indicator:Alcohol, recorded per capita (15+) consumption (in litres of pure alcohol) - Beverage Types:Beer` =
"Beer")) %>% filter(Year == 2013) %>% select(-Code)
# Filtering wine consumption for 2015 and renaming
WineConsumption <- WineConsumption %>%
reshape::rename(c(`Indicator:Alcohol, recorded per capita (15+) consumption (in litres of pure alcohol) - Beverage Types:Wine` =
"Beer")) %>% filter(Year == 2013) %>% select(-Code)
Happiness2019 <- read_csv("/Users/dunk/Classes/NMC 245/2019.csv")
BeerConsumption <- read_csv("/Users/dunk/Classes/NMC 245/beer-consumption-per-person.csv")
WineConsumption <- read_csv("/Users/dunk/Classes/NMC 245/wine-consumption-per-person.csv")
SpiritsConsumption <- read_csv("/Users/dunk/Classes/NMC 245/spirits-consumption-per-person.csv")
# Filtering spirit consumption for 2014 and renaming some things
SpiritsConsumption <- SpiritsConsumption %>%
reshape::rename(c(`Indicator:Alcohol, recorded per capita (15+) consumption (in litres of pure alcohol) - Beverage Types:Spirits` =
"Spirits")) %>% filter(Year == 2013) %>% select(-Code)
# Filtering beer consumption for 2015 and renaming
BeerConsumption <- BeerConsumption %>%
reshape::rename(c(`Indicator:Alcohol, recorded per capita (15+) consumption (in litres of pure alcohol) - Beverage Types:Beer` =
"Beer")) %>% filter(Year == 2013) %>% select(-Code)
# Filtering wine consumption for 2015 and renaming
WineConsumption <- WineConsumption %>%
reshape::rename(c(`Indicator:Alcohol, recorded per capita (15+) consumption (in litres of pure alcohol) - Beverage Types:Wine` =
"Beer")) %>% filter(Year == 2013) %>% select(-Code)
# https://apps.who.int/gho/data/node.main.A1039?lang=en
AlcoholConsumption <- read_csv("/Users/dunk/Classes/NMC 245/SA_0000001400.csv")
View(AlcoholConsumption)
# https://apps.who.int/gho/data/node.main.A1039?lang=en
AlcoholConsumption <- read_csv("/Users/dunk/Classes/NMC 245/SA_0000001400.csv", skip = 1)
AlcoholConsumption <- AlcoholConsumption %>% select(Country, `Beverage Types`, `2018`) %>%
mutate(Year = `2018`) %>% select(-`2018`)
View(AlcoholConsumption)
AlcoholConsumption <- AlcoholConsumption %>% select(Country, `Beverage Types`, `2018`) %>%
mutate(`Year of our Lord` = `2018`) %>% select(-`2018`)
# https://apps.who.int/gho/data/node.main.A1039?lang=en
AlcoholConsumption <- read_csv("/Users/dunk/Classes/NMC 245/SA_0000001400.csv", skip = 1)
AlcoholConsumption <- AlcoholConsumption %>% select(Country, `Beverage Types`, `2018`) %>%
mutate(`Year of our Lord` = `2018`) %>% select(-`2018`)
View(AlcoholConsumption)
View(AlcoholConsumption)
# https://apps.who.int/gho/data/node.main.A1039?lang=en
AlcoholConsumption <- read_csv("/Users/dunk/Classes/NMC 245/SA_0000001400.csv", skip = 1)
AlcoholConsumption <- AlcoholConsumption %>% select(Country, `Beverage Types`, `2018`) %>%
mutate(`Year of our Lord 2018` = `2018`) %>% select(-`2018`)
View(AlcoholConsumption)
# https://apps.who.int/gho/data/node.main.A1039?lang=en
AlcoholConsumption <- read_csv("/Users/dunk/Classes/NMC 245/SA_0000001400.csv", skip = 1)
AlcoholConsumption <- AlcoholConsumption %>% select(Country, `Beverage Types`, `2018`) %>%
mutate(`Alcohol Consumption in the Year of our Lord 2018` = `2018`) %>% select(-`2018`)
View(AlcoholConsumption)
# https://www.kaggle.com/mathurinache/world-happiness-report?select=2020.csv
Happiness2018 <- read_csv("/Users/dunk/Classes/NMC 245/2018.csv")
View(Happiness2018)
View(Happiness2018)
Happiness2018 <- Happiness2018 %>% reshape::rename(c(`Country or region` = "Country")) # Easier for join but remember some regions in there
Happiness2018 <- Happiness2018 %>% reshape::rename(c(`Country or region` = "Country",
Score = "Happiness"))# Easier for join but remember some regions in there
View(AlcoholConsumption)
pivot_wider
?pivot_wider
# Need to pivot_wider beer, wine, spirits and all types then join?
test <- pivot_wider(AlcoholConsumption, names_from = "Country", values_from = `Beverage Types`)
View(test)
# Need to pivot_wider beer, wine, spirits and all types then join?
test <- pivot_wider(AlcoholConsumption, names_from = `Beverage Types`, values_from = `Alcohol Consumption in the Year of our Lord 2018`)
View(test)
# Need to pivot_wider beer, wine, spirits and all types then join?
AlcoholConsumption2 <- pivot_wider(AlcoholConsumption, names_from = `Beverage Types`, values_from = `Alcohol Consumption in the Year of our Lord 2018`)
View(AlcoholConsumption2)
# Checking for country differences
anti_join(AlcoholConsumption2, Happiness2018, by = c("Country"))
View(Happiness2018)
# Checking for country differences
head(anti_join(AlcoholConsumption2, Happiness2018, by = c("Country")), 20) # Looks like there's a lot, too much work to deal with
# Checking for country differences
head(anti_join(AlcoholConsumption2, Happiness2018, by = c("Country")), 40) # Looks like there's a lot, too much work to deal with
# Checking for country differences
print(anti_join(AlcoholConsumption2, Happiness2018, by = c("Country")), 46) # Looks like there's a lot, too much work to deal with
# Checking for country differences
print(anti_join(AlcoholConsumption2, Happiness2018, by = c("Country")), topn = 46) # Looks like there's a lot, too much work to deal with
# Checking for country differences
mismatched <- anti_join(AlcoholConsumption2, Happiness2018, by = c("Country")) # Looks like there's a lot, too much work to deal with
View(mismatched)
library(StandardizeText)
StandardizeText::standardize.countrynames(mismatched, input.column = "Country")
StandardizeText::standardize.countrynames(mismatched, input.column = Country)
StandardizeText::standardize.countrynames(mismatched, input.column = `Country`)
StandardizeText::standardize.countrynames(mismatched)
?standardize.countrynames
StandardizeText::standardize.countrynames(mismatched, input.column = 1)
StandardizeText::standardize.countrynames(mismatched, standard.column = 1)
StandardizeText::standardize.countrynames(mismatched, standard.column = "Country")
StandardizeText::standardize.countrynames(mismatched, standard.column = `Country`)
StandardizeText::standardize.countrynames(mismatched$Country)
AlcoholConsumption3 <- AlcoholConsumption2
AlcoholConsumption3$Country <- StandardizeText::standardize.countrynames(mismatched$Country)
AlcoholConsumption3$Country <- StandardizeText::standardize.countrynames(AlcoholConsumption2$Country)
# Testing join again
mismatched2 <- anti_join(AlcoholConsumption3, Happiness2018, by = c("Country"))
View(mismatched2)
countryList <- unique(mismatched2$Country)
`%notin%` <- Negate(`%in%`)
countryList %notin% Happiness2018$Country
grep(countryList %notin% Happiness2018$Country)
grep(countryList, Happiness2018$Country)
?grep
setdiff(mismatched2$Country, Happiness2018)
result <- lapply(Happiness2018$Country, function(x) grep (countryList))
grep(countryList, Happiness2018$Country)
for (i in 1:nrows(Happiness2018)) {
grep(countryList, Happiness2018$Country)
}
for (i in 1:nrow(Happiness2018)) {
grep(countryList, Happiness2018$Country)
}
test <- for (i in 1:nrow(Happiness2018)) {
grep(countryList, Happiness2018$Country)
}
?map_df
map_df(1:10, grep(countryList, Happiness2018$Country))
# One more try
Happiness20182 <- Happiness2018
Happiness20182$Country <- StandardizeText::standardize.countrynames(Happiness2018$Country)
mismatched3 <- anti_join(AlcoholConsumption3, Happiness20182, by = c("Country"))
View(mismatched3)
View(Happiness20182)
View(AlcoholConsumption3)
AlcoholHappy <- left_join(AlcoholConsumption3, Happiness20182, by = c("Country"))
View(AlcoholHappy)
p <- ggplot(AlcoholHappy, aes(Happiness, `All Types`, color = Country)) + geom_point()
plotly::ggplotly(p)
p <- ggplot(AlcoholHappy, aes(Happiness, `all types`, color = Country)) + geom_point()
plotly::ggplotly(p)
p <- ggplot(AlcoholHappy, aes(Happiness, `All types`, color = Country)) + geom_point()
plotly::ggplotly(p)
p <- ggplot(AlcoholHappy, aes(Happiness, `All types`, color = Country)) + geom_point() + geom_smooth()
plotly::ggplotly(p)
?relocate
AlcoholHappy <- left_join(AlcoholConsumption3, Happiness20182, by = c("Country")) %>% relocate(Happiness, .after = "Country") %>%
arrange(`Overall rank`)
View(AlcoholHappy)
p <- ggplot(AlcoholHappy, aes(Happiness, `All types`, color = Country)) + geom_point() + labs(y = "Alcohol Consumption")
plotly::ggplotly(p)
p <- ggplot(AlcoholHappy, aes(Happiness, `All types`, color = Country)) + geom_point() + labs(y = "Alcohol Consumption") +
theme_economist() + theme(legend.position = "none")
plotly::ggplotly(p)
lares::corr_cross(AlcoholHappy)
plotly::ggplotly(p)
?geom_text
p <- ggplot(AlcoholHappy, aes(Happiness, `All types`, color = Country)) + geom_point() + labs(y = "Alcohol Consumption") +
theme_economist() + theme(legend.position = "none") + geom_text(aes(x = 5, y = 15, label = "Looks correlated to me!"))
plotly::ggplotly(p)
p <- ggplot(AlcoholHappy, aes(Happiness, `All types`, color = Country)) + geom_point() + labs(y = "Alcohol Consumption") +
theme_economist() + theme(legend.position = "none") + geom_text(aes(x = 5, y = 16, label = "Looks correlated to me!"))
plotly::ggplotly(p)
p <- ggplot(AlcoholHappy, aes(Happiness, `All types`, color = Country)) + geom_point() +
labs(y = "Alcohol Consumption (Liters per capita for 15+)", x = "Happiness Score") +
theme_economist() + theme(legend.position = "none") + geom_text(aes(x = 5, y = 16, label = "Looks correlated to me!"))
plotly::ggplotly(p)
?ggcorr
GGally::ggcorr(AlcoholHappy)
GGally::ggcorr(AlcoholHappy, label = T)
write_csv(AlcoholHappy, "/Users/dunk/Classes/NMC 245/AlcoholHappy.csv")
library(readr)
library(purrr)
library(tidyr)
library(tidyverse)
library(lubridate)
library(sf)
theme_set(theme_bw())
library(rnaturalearth)
library(maps)
library(rnaturalearthdata)
library(rgeos)
# devtools::install_github("UrbanInstitute/urbnmapr")
library(urbnmapr)
library(tidycensus)
library(tidyverse)
library(leaflet)
library(sf)
library(viridis)
theme(theme_bw)
# Getting to know the syntax of tidycensus
oregon_pop <- get_acs(geography = "county",
variables = "B01003_001",
state = "OR",
geometry = TRUE)
oregon_pop
df <- read_csv("/Users/dunk/FDIC/Data/ACdata.csv")
View(df)
str(df)
View(df)
timeseries_cb <- df %>% group_by(year, state) %>% summarize(sum = sum(db))
timeseries_cb <- df %>% group_by(year, state) %>% summarize(sum = sum(cb))
View(timeseries_cb)
timeseries_cb <- df %>% group_by(year, state) %>% summarize(sum = sum(cb)) %>% ungroup
View(timeseries_cb)
timeseries_cb <- df %>% group_by(year, state) %>% summarize(sum = sum(cb)) %>% ungroup()
timeseries_cb <- df %>% group_by(year) %>% summarize(sum = sum(cb)) %>% ungroup()
df %>% filter(year == 2009) %>% sum(cb)
View(timeseries_cb)
timeseries_cb <- df %>% group_by(year) %>% summarize(sum = sum(cb)) %>% ungroup
timeseries_cb <- df %>% group_by(year) %>% summarize(sum = mean(cb)) %>% ungroup
timeseries_cb <- df %>% group_by(year) %>% summarize(sum = mean(cb))
timeseries_cb <- df %>% group_by(year) %>% summarize(sum = count(cb))
View(timeseries_cb)
timeseries_cb <- df %>% group_by(year) %>% summarize(sum = sum(cb)) %>% ungroup()
timeseries_cb <- df %>% group_by(year) %>% summarize(sum_cb = sum(cb)) %>% ungroup()
timeseries_cb <- df %>% group_by(year, county_state) %>% summarize(sum_cb = sum(cb)) %>% ungroup()
timeseries_cb <- df %>% group_by(year, county_state) %>% summarize(sum_cb = sum(cb))
df <- read_csv("/Users/dunk/FDIC/Data/ACdata.csv")
View(timeseries_cb)
timeseries_cb <- df %>% dplyr::group_by(year, county_state) %>% dplyr::summarize(sum_cb = sum(cb))
View(timeseries_cb)
timeseries_cb <- df %>% dplyr::group_by(year, state) %>% dplyr::summarize(sum_cb = sum(cb))
View(timeseries_cb)
timeseries_cb %>% ggplot() + geom_line(aes(x = year, y = cb)) + facet_wrap( ~ state)
timeseries_cb %>% ggplot() + geom_line(aes(x = year, y = cb_sum)) + facet_wrap( ~ state)
timeseries_cb %>% ggplot() + geom_line(aes(x = year, y = sum_cb)) + facet_wrap( ~ state)
str(df)
timeseries_cl <- df %>% dplyr::group_by(year) %>% dplyr::summarize(sum_cl = sum(consumer_loans), sum_nacl = sum(na_consumer_loans))
View(timeseries_cl)
timeseries_cl %>% ggplot() + geom_line(aes(x = year, y = sum_cl, color = "red")) +
geom_line(aes(x = year, y = sum_nacl, color = "black"))
timeseries_cl %>% ggplot() + geom_line(aes(x = year, y = sum_cl), color = "red") +
geom_line(aes(x = year, y = sum_nacl), color = "black")
timeseries_cl %>% ggplot() + geom_line(aes(x = year, y = sum_cl), color = "red") +
geom_line(aes(x = year, y = sum_nacl), color = "black") + labs(x = "Year", y = "Consumer Loans")
timeseries_cl %>% ggplot() + geom_line(aes(x = year, y = sum_cl), color = "red") +
geom_line(aes(x = year, y = sum_nacl), color = "black") + labs(x = "Year", y = "Consumer Loans") + scale_y_continuous(scales::label_numbe)
timeseries_cl %>% ggplot() + geom_line(aes(x = year, y = sum_cl), color = "red") +
geom_line(aes(x = year, y = sum_nacl), color = "black") + labs(x = "Year", y = "Consumer Loans") + scale_y_continuous(scales::label_number)
timeseries_cl %>% ggplot() + geom_line(aes(x = year, y = sum_cl), color = "red") +
geom_line(aes(x = year, y = sum_nacl), color = "black") + labs(x = "Year", y = "Consumer Loans") + scale_y_continuous(scales::label_comma())
timeseries_cl %>% ggplot() + geom_line(aes(x = year, y = sum_cl), color = "red") +
geom_line(aes(x = year, y = sum_nacl), color = "black") + labs(x = "Year", y = "Consumer Loans") + scale_y_continuous(scales::label_comma)
timeseries_cl %>% ggplot() + geom_line(aes(x = year, y = sum_cl), color = "red") +
geom_line(aes(x = year, y = sum_nacl), color = "black") + labs(x = "Year", y = "Consumer Loans") +
scale_y_continuous(labels = scales::comma)
coeff <- median(timeseries_cl$sum_cl/timeseries_cl$sum_nacl)
View(timeseries_cl)
timeseries_cl %>% ggplot() + geom_line(aes(x = year, y = sum_cl / coeff), color = "red") +
geom_line(aes(x = year, y = sum_nacl), color = "black") + labs(x = "Year", y = "Consumer Loans ($)") +
scale_y_continuous(labels = scales::comma,
sec.axis = sec_axis(~.*coeff, name = "Non-Consumer Loans ($)"))
?sec_axis
timeseries_cl %>% ggplot() + geom_line(aes(x = year, y = sum_cl / coeff), color = "red") +
geom_line(aes(x = year, y = sum_nacl), color = "black") + labs(x = "Year", y = "Consumer Loans ($)") +
scale_y_continuous(labels = scales::comma,
sec.axis = sec_axis(~.*coeff, name = "Non-Consumer Loans ($)", labels = scales::comma))
timeseries_cl %>% ggplot() + geom_line(aes(x = year, y = sum_cl / coeff), color = "red") +
geom_line(aes(x = year, y = sum_nacl), color = "black") + labs(x = "Year", y = "Consumer Loans ($)") +
scale_y_continuous(labels = scales::comma,
sec.axis = sec_axis(~.*coeff, name = "Non-Consumer Loans ($)", labels = scales::comma)) +
theme(axis.title.y = element_text(color = "red"))
timeseries_cl %>% ggplot() + geom_line(aes(x = year, y = sum_cl / coeff), color = "red") +
geom_line(aes(x = year, y = sum_nacl), color = "black") + labs(x = "Year", y = "Consumer Loans ($)") +
scale_y_continuous(labels = scales::comma,
sec.axis = sec_axis(~.*coeff, name = "Non-Consumer Loans ($)", labels = scales::comma)) +
theme(axis.title.y.left = element_text(color = "red"))
timeseries_cl %>% ggplot() +
geom_line(aes(x = year, y = sum_nacl), color = "black") + labs(x = "Year", y = "Consumer Loans ($)") +
geom_line(aes(x = year, y = sum_cl / coeff), color = "red") +
scale_y_continuous(labels = scales::comma,
sec.axis = sec_axis(~.*coeff, name = "Non-Consumer Loans ($)", labels = scales::comma)) +
theme(axis.title.y.left = element_text(color = "red"))
timeseries_cl %>% ggplot() +
geom_line(aes(x = year, y = sum_nacl), color = "black") + labs(x = "Year", y = "Consumer Loans ($)") +
geom_line(aes(x = year, y = sum_cl / coeff), color = "red") +
scale_y_continuous(labels = scales::comma,
sec.axis = sec_axis(~./coeff, name = "Non-Consumer Loans ($)", labels = scales::comma)) +
theme(axis.title.y.left = element_text(color = "red"))
timeseries_cl %>% ggplot(aes(x = year)) +
geom_line(aes(y = sum_nacl), color = "black") + labs(x = "Year", y = "Consumer Loans ($)") +
geom_line(aes(y = sum_cl / coeff), color = "red") +
scale_y_continuous(labels = scales::comma,
sec.axis = sec_axis(~.*coeff, name = "Non-Consumer Loans ($)", labels = scales::comma)) +
theme(axis.title.y.left = element_text(color = "red"))
timeseries_cl %>% ggplot(aes(x = year)) +
geom_line(aes(y = sum_nacl), color = "black") +
geom_line(aes(y = sum_cl / coeff), color = "red") +
labs(x = "Year", y = "Consumer Loans ($)") +
scale_y_continuous(labels = scales::dollar,
sec.axis = sec_axis(~.*coeff, name = "Non-Consumer Loans ($)", labels = scales::dollar)) +
theme(axis.title.y.left = element_text(color = "red"))
timeseries_cl %>% ggplot(aes(x = year)) +
geom_line(aes(y = sum_nacl), color = "black") +
geom_line(aes(y = sum_cl / coeff), color = "red") +
labs(x = "Year", y = "Consumer Loans ($)") + ggtitle("Not Adjusted for CPI") +
scale_y_continuous(labels = scales::dollar,
sec.axis = sec_axis(~.*coeff, name = "Non-Consumer Loans ($)", labels = scales::dollar)) +
theme(axis.title.y.left = element_text(color = "red"),
plot.title = element_text(hjust = 0.5))
timeseries_cl %>% ggplot(aes(x = year)) +
geom_line(aes(y = sum_nacl / coeff), color = "black") +
geom_line(aes(y = sum_cl), color = "red") +
labs(x = "Year", y = "Consumer Loans ($)") + ggtitle("Not Adjusted for CPI") +
scale_y_continuous(labels = scales::dollar,
sec.axis = sec_axis(~.*coeff, name = "Non-Consumer Loans ($)", labels = scales::dollar)) +
theme(axis.title.y.left = element_text(color = "red"),
plot.title = element_text(hjust = 0.5))
timeseries_cl %>% ggplot(aes(x = year)) +
geom_line(aes(y = sum_nacl), color = "red") +
geom_line(aes(y = sum_cl / coeff), color = "black") +
labs(x = "Year", y = "Consumer Loans ($)") + ggtitle("Not Adjusted for CPI") +
scale_y_continuous(labels = scales::dollar,
sec.axis = sec_axis(~.*coeff, name = "Non-Consumer Loans ($)", labels = scales::dollar)) +
theme(axis.title.y.left = element_text(color = "red"),
plot.title = element_text(hjust = 0.5))
timeseries_cl %>% ggplot(aes(x = year)) +
geom_line(aes(y = sum_nacl), color = "red") +
geom_line(aes(y = sum_cl / coeff), color = "black") +
labs(x = "Year", y = "Non-Consumer Loans ($)") + ggtitle("Not Adjusted for CPI") +
scale_y_continuous(labels = scales::dollar,
sec.axis = sec_axis(~.*coeff, name = "Consumer Loans ($)", labels = scales::dollar)) +
theme(axis.title.y.right = element_text(color = "red"),
plot.title = element_text(hjust = 0.5))
?ggtitle
timeseries_cl %>% ggplot(aes(x = year)) +
geom_line(aes(y = sum_nacl), color = "red") +
geom_line(aes(y = sum_cl / coeff), color = "black") +
labs(x = "Year", y = "Non-Consumer Loans ($)") + ggtitle("Community Bank Loans to Consumers and Loans not Repaid in last 90 days",
subtitle = "Not Adjusted for CPI") +
scale_y_continuous(labels = scales::dollar,
sec.axis = sec_axis(~.*coeff, name = "Consumer Loans ($)", labels = scales::dollar)) +
theme(axis.title.y.right = element_text(color = "red"),
plot.title = element_text(hjust = 0.5))
timeseries_cl %>% ggplot(aes(x = year)) +
geom_line(aes(y = sum_nacl), color = "red") +
geom_line(aes(y = sum_cl / coeff), color = "black") +
labs(x = "Year", y = "Non-Repaid Consumer Loans ($)") + ggtitle("Community Bank Loans to Consumers and Loans not Repaid in last 90 days",
subtitle = "Not Adjusted for CPI") +
scale_y_continuous(labels = scales::dollar,
sec.axis = sec_axis(~.*coeff, name = "Consumer Loans ($)", labels = scales::dollar)) +
theme(axis.title.y.right = element_text(color = "red"),
plot.title = element_text(hjust = 0.5))
n_sims <- 500
# 1.
many_x <- runif(n_sims)
# 2.
exp_many_x <- exp(many_x)
?runif
str(df)
